@page "/DisplayEmplyees"
@using EmployeeWebService.Service
@using EmployeeWeb.Data


@inject IEmployeeService EmployeeService;
<div class="jumbotron text-center">
    <h1>Display Emplyees</h1>
</div>
@* Filter Table *@
<div class="row ">
    <div class="col-lg-7 mx-auto">
        <div class="card mt-2 mx-auto p-4 bg-light">
            <div class="card-body bg-light">
                <div class="container">
                    <div class="controls">
                        <div class="row">
                            <h1>Filter</h1>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="form_height">Overtime employees *</label>
                                    <RadzenSwitch Style="margin-bottom: 20px" Change=@(args => GetFilterEmployeesBasedOnOvertimeAsync(args))>
                                    </RadzenSwitch>
                                </div>
                                <div class="row">
                                    <div class="col-md-4">
                                        <button type="button" class="btn btn-primary btn-lg" @onclick="@ShowAllEmpl">Show all</button>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@* Table with empl *@
@if (employeesDisplayed == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Hourly Wage</th>
            <th>Hours/Month</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in employeesDisplayed)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.Name</td>
                <td>@item.HourlyWage</td>
                <td>@item.HoursPerMonth</td>
            </tr>
        }

        </tbody>
    </table>
}
    //finances
<div class="row ">
    <div class="col-lg-7 mx-auto">
        <div class="card mt-2 mx-auto p-4 bg-light">
            <div class="card-body bg-light">
                <div class="container">
                    <div class="controls">
                        <h1>Finances</h1>
                        <div class="row">
                            <div class="col-md-2">
                                <label>Regular employees </label>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <RadzenSwitch Style="margin-bottom: 20px" Change=@(args => GetPayments(args))>
                                    </RadzenSwitch>
                                </div>
                                <div class="col-md-2">
                                    <label >Overtime employees </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <label>Payments: </label>
                    </div>
                    <div class="col-md-4">
                        <label>@payments</label>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    private IList<Employee> employeesDisplayed;
    private IList<Employee> _allEmployees;
    private double payments;
    
   

    protected override async Task OnInitializedAsync()
    {
    // Generate the list of adultsDisplayed 
        try
        {
            _allEmployees = await EmployeeService.GetAllEmpl();
            employeesDisplayed = _allEmployees;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
    private async Task GetPayments(bool args)
    {
        try
        {
            payments= await  EmployeeService.GetPayments(args);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
    
    private async Task GetFilterEmployeesBasedOnOvertimeAsync(bool args)
    {
        try
        {
            employeesDisplayed = await EmployeeService.GetFilterEmployeesBasedOnOvertimeAsync(args);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private void ShowAllEmpl()
    {
        employeesDisplayed = _allEmployees;
    }

}